Variables y operaciones
1 Responde las siguientes preguntas en la secci√≥n de comentarios:
    ¬øQu√© es una variable y para qu√© sirve?
        Un √°rea de memoria reservada para almacenar informaci√≥n
    ¬øCu√°l es la diferencia entre declarar e inicializar una variable?
        Declarar √∫nicamente es reservar el espacio de memoria, inicializar es asignar un valor a este espacio de memoria reservado.
    ¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
        Un valor num√©rico usa menos bytes en memoria y se pueden hacer operaciones aritm√©ticas con el, los valores string usan 8bytes por cada car√°cter y no se suman, al concatenar strings se ponen uno a un costado sin realizar operaciones aritm√©ticas 
        Num√©rico: 8 + 4 = 12
        String: ‚Äú8‚Äù+‚Äù4‚Äù=‚Äù84‚Äù
    ¬øCu√°l operador me permite sumar o concatenar?
        +
2 Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
    Nombre
       	string
    Apellido
	    string
    Nombre de usuario en Platzi
    	string
	Edad
    	num√©rico
	Correo electr√≥nico
    	string
	Mayor de edad
    	boleano
	Dinero ahorrado
    	num√©rico
	Deudas
    	num√©rico
3 Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
	let nombre;
	let apellido;
    let usuairoPlatzi;
    let fechaNacimiento;
    let email;
    let mayorEdad;
    let ahorro;
    let dauda;


4 Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
	Nombre completo (nombre y apellido)
        const nombreCompleto = nombre + ' ' +apellido;
	Dinero real (dinero ahorrado menos deudas)
        const capital = ahorro - dauda;


Funciones
1 Responde las siguientes preguntas en la secci√≥n de comentarios:
	¬øQu√© es una funci√≥n?
        un conjunto de instrucciones construidas para obtener un resultado especifico.
	¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
        para reutilizar c√≥digo, ordenado y de f√°cil mantenimiento.
	¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
        los parametros son las variables que se establecen en la declaraci√≥n de la funci√≥n, los argumentos son los valores que se env√≠an al momento de que esta funci√≥n es llamada.
        parametros: function ejemplo (a, b)
        argumentos: valor = ejemplo(2, 3);

2 Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
    const name = "Juan David";
    const lastname = "Castro Gallego";
    const completeName = name + lastname;
    const nickname = "juandc";

    console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");

        function presentacion (first, last, nick){
            return "Mi nombre es " + first + " " + last + ", pero prefiero que me digas " + nick + ".";
        }
        console.log(presentacion(name, lastname, nickname));
 
 Condicionales
1 Responde las siguientes preguntas en la secci√≥n de comentarios:
	¬øQu√© es una condicional?
        es una estructura de control que permite seleccionar una secuencia de instrucciones dependiendo del resultado de una comparaci√≥n
	¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
        if puede selecionar entre 2 resultados boleanos, tambien se pueden anidar para m√°s resultados.
        switch se puede asignar una condicion con m√∫ltiples opciones.
	¬øPuedo combinar funciones y condicionales?
        si se puede

2 Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
    const tipoDeSuscripcion = "Basic";

    switch (tipoDeSuscripcion) {
        case "Free":
            console.log("Solo puedes tomar los cursos gratis");
            break;
        case "Basic":
            console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
            break;
        case "Expert":
            console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
            break;
        case "ExpertPlus":
            console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
            break;
    }
    if (tipoDeSuscripcion == "Free"){
        console.log("Solo puedes tomar los cursos gratis");
    }
    elseif (tipoDeSuscripcion == "Basic"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
    }
    elseif (tipoDeSuscripcion == "Expert"){
        console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
    }
    elseif (tipoDeSuscripcion == "ExpertPlus"){
        console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
    }

3 Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays y un solo condicional. üòè
const suscripciones = [
        {tipo:"Free", descripcion:"Solo puedes tomar los cursos gratis"}, 
        {tipo:"Basic", descripcion:"Puedes tomar casi todos los cursos de Platzi durante un mes"}, 
        {tipo:"Expert", descripcion:"Puedes tomar casi todos los cursos de Platzi durante un a√±o"}, 
        {tipo:"ExpertPlus", descripcion:"T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o"}];
    const tipoDeSuscripcion = "Expert";
    suscripciones.forEach (objet=>{
        if(objet.tipo == tipoDeSuscripcion){
            console.log(objet.descripcion);
        }
    });

Ciclos
1 Responde las siguientes preguntas en la secci√≥n de comentarios:
	¬øQu√© es un ciclo?
        Es una estructura de control que permite repetir varias veces un bloque de c√≥igo.
	¬øQu√© tipos de ciclos existen en JavaScript?
        for, while, dowhile
	¬øQu√© es un ciclo infinito y por qu√© es un problema?
        un ciclo que no se especifico un l√≠mite de repeticiones y es un problema porque puede desbordar la memoria o acabar los recursos de ejecuci√≥n del programa
	¬øPuedo mezclar ciclos y condicionales?
        si se puede
2 Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
    for (let i = 0; i < 5; i++) {
        console.log("El valor de i es: " + i);
    }
    for (let i = 10; i >= 2; i--) {
        console.log("El valor de i es: " + i);
    }

    let i=0;
    while (i<5){
        console.log("El valor de i es: " + i);
        i++;
    }
    let i=10;
    while (i>=2){
        console.log("El valor de i es: " + i);
        i--;
    }

3 Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
Pista: puedes usar la funci√≥n prompt de JavaScript.

    let respuesta = 0;
    let resultado = 4;
    while (resultado != respuesta){
        respuesta = prompt('Cuanto esa 2 + 2?');    
    }
    alert("Felicidades");

Listas
1 Responde las siguientes preguntas en la secci√≥n de comentarios:
	¬øQu√© es un array?
        es una colecci√≥n de datos del mismo tipo
	¬øQu√© es un objeto?
        es una colecci√≥n de datos de tipos mixtos
	¬øCu√°ndo es mejor usar objetos o arrays?

	¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
        si ae puede
2 Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.
    let comida = ["frutas", "cereales", "l√°cteos", "carnes"];
    function primerElemento (arreglo){
        console.log(arreglo[0]);
    }
    primerElemento(comida);

3 Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).
    let comida = ["frutas", "cereales", "l√°cteos", "carnes"];
    function todosElementos (arreglo){
        arreglo.forEach(function(elemento, indice, array){
            console.log(elemento);
        });
    }
    todosElementos(comida);

4 Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo).
    let empleado = [
        {id:1, nombre:"Adri√°n", apellido:"Valdez", edad:40, tipoDeSuscripcion:"Expert"},
        {id:2, nombre:"Francisco", apellido:"Del Rio", edad:46, tipoDeSuscripcion:"Basic"},
        {id:3, nombre:"Gladys", apellido:"C√°rdenas", edad:39, tipoDeSuscripcion:"ExpertPlus"},
        {id:4, nombre:"Ram√≥n", apellido:"Zavala", edad:42, tipoDeSuscripcion:"Free"},
    ];

    function todosElementos (arreglo){
        arreglo.forEach(function(elemento, array){
                for (let atributo in elemento){
                    console.log(`${atributo}: ${elemento[atributo]}`);
                }
            
        });
    }
    todosElementos(empleado);